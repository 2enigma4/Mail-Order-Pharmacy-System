!SESSION 2022-06-29 09:34:29.392 -----------------------------------------------
eclipse.buildId=4.14.1.202204250734
java.version=17.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

This is a continuation of log file F:\POD1\MFPE POD 1\MFPE POD 1\.metadata\.bak_1.log
Created Time: 2022-06-29 11:28:08.995

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:08.995
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:08.997
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:09.725
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:09.726
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:09.726
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:11.763
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:11.764
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:11.765
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:14.167
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:14.167
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:14.168
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:14.520
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:14.521
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:14.521
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:15.679
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:15.680
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:15.681
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:15.701
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:15.701
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:15.702
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:16.496
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:16.496
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:16.497
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:17.298
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:17.299
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:17.299
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:18.084
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:18.084
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:18.085
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:19.699
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:19.699
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:19.700
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:27.309
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:27.309
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:27.310
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:27.651
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:27.651
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:27.652
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:33.388
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:33.389
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:33.389
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:34.392
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:34.393
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:34.393
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:36.300
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:36.301
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:36.301
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:38.462
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:38.463
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:38.464
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:40.139
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:40.140
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:40.140
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:40.468
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:40.468
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:40.468
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:43.284
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:43.284
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:43.286
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:43.648
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:43.648
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:43.649
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:45.284
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:45.285
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:45.285
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:45.302
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:45.302
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:45.303
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:46.194
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:46.195
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:46.195
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:47.544
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:47.544
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:47.545
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:48.164
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:48.164
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:48.165
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:49.956
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:49.957
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:49.957
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:50.359
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:50.360
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:50.360
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:54.494
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:54.495
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:54.496
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:56.571
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:56.572
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:56.572
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:56.954
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:56.955
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:56.956
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:13.965
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:29:13.966
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:29:13.967
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:14.336
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:14.337
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:14.338
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:16.600
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:29:16.601
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:29:16.601
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:16.953
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:16.954
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:16.954
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:20.756
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:29:20.757
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:29:20.757
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:21.141
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:21.141
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:21.141
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:22.633
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:29:22.633
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:29:22.634
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:22.649
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:22.650
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:22.650
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:23.515
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:23.516
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:23.517
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:24.458
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:29:24.459
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:29:24.459
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:24.474
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:24.475
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:24.476
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:27.061
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:29:27.062
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:29:27.063
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:27.398
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:27.398
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:27.399
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:28.455
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:29:28.456
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:29:28.457
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:28.472
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:28.473
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:28.473
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:29.305
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:29.305
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:29.306
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:32.418
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{\"drugId\":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:29:32.419
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:29:32.419
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:32.434
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{\"drugId\":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:32.435
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:32.436
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:33.265
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{\"drugId\":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:33.266
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:33.266
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:34.306
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{\"drugId\":\"DD4\","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:29:34.307
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:29:34.308
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:34.324
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{\"drugId\":\"DD4\","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:34.325
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:34.325
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:35.047
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{\"drugId\":\"DD4\","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:35.048
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:35.048
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:36.739
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{\"drugId\":\"DD4\",\"drugName\":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:29:36.739
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:29:36.739
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:38.545
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{\"drugId\":\"DD4\",\"drugName\":\"Dolo\","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:29:38.547
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:29:38.547
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:38.928
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{\"drugId\":\"DD4\",\"drugName\":\"Dolo\","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:38.928
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:38.928
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:39.629
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{\"drugId\":\"DD4\",\"drugName\":\"Dolo\","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:29:39.630
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:29:39.631
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:29:42.470
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Panadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\\"manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:29:42.471
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
