!SESSION 2022-06-29 09:34:29.392 -----------------------------------------------
eclipse.buildId=4.14.1.202204250734
java.version=17.0.2
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.springframework.boot.ide.branding.sts4
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.springframework.boot.ide.branding.sts4

This is a continuation of log file F:\POD1\MFPE POD 1\MFPE POD 1\.metadata\.bak_0.log
Created Time: 2022-06-29 11:24:54.261

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:24:54.261
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:24:54.263
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:24:55.485
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":"Chennai","quantity":500},{"serialId":"2","location":"Bangalore","quantity":500},{"serialId":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:24:55.486
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:24:55.486
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:24:58.793
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\","quantity":500},{"serialId":"2","location":"Bangalore","quantity":500},{"serialId":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:24:58.793
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:24:58.794
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:00.072
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\","quantity":500},{"serialId":"2","location":"Bangalore","quantity":500},{"serialId":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:25:00.073
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:25:00.073
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:03.742
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{"serialId":"2","location":"Bangalore","quantity":500},{"serialId":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:03.743
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:03.743
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:04.295
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{"serialId":"2","location":"Bangalore","quantity":500},{"serialId":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:25:04.295
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:25:04.296
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:08.473
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":"2","location":"Bangalore","quantity":500},{"serialId":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:08.473
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:08.474
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:10.044
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\","location":"Bangalore","quantity":500},{"serialId":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:10.045
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:10.045
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:13.109
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":"Bangalore","quantity":500},{"serialId":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:13.109
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:13.109
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:13.131
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":"Bangalore","quantity":500},{"serialId":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:25:13.133
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:25:13.133
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:14.771
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":"Bangalore","quantity":500},{"serialId":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:25:14.772
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:25:14.773
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:17.400
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\","quantity":500},{"serialId":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:17.622
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:17.622
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:21.140
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{"serialId":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:21.141
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:21.141
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:23.388
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{"serialId":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:25:23.389
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:25:23.389
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:27.415
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:27.416
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:27.416
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:28.404
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":"3","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:25:28.404
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:25:28.405
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:30.111
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:30.111
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:30.112
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:30.133
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\","location":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:25:30.134
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:25:30.134
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:38.737
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:38.738
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:38.739
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:38.758
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:25:38.759
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:25:38.759
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:39.640
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":"Pune","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:25:39.640
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:25:39.640
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:43.030
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\","quantity":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:43.031
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:43.032
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:45.631
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{"serialId":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:45.631
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:45.631
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:50.295
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":"4","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:50.295
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:50.296
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:52.019
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\","location":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:52.019
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:52.020
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:55.143
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":"Hyderabad","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:55.143
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:55.144
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:58.942
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:25:58.942
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:25:58.943
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:25:59.719
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\","quantity":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:25:59.720
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:25:59.720
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:01.986
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:26:01.986
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:26:01.986
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:02.395
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},{"drugId":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:26:02.396
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:26:02.397
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:05.967
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},{\"drugId\":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:26:06.088
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:26:06.089
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:06.112
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},{\"drugId\":"CR2","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:26:06.113
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:26:06.113
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:08.414
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},{\"drugId\":\"CR2\","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:26:08.415
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:26:08.415
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:08.435
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},{\"drugId\":\"CR2\","drugName":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:26:08.436
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:26:08.437
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:12.529
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},{\"drugId\":\"CR2\",\"drugName\":"Crocin","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:26:12.529
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:26:12.530
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:46.053
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:26:46.054
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:26:46.055
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:46.508
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:26:46.509
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:26:46.509
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:48.521
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:26:48.522
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:26:48.523
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:48.542
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\","manufacturer":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:26:48.542
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:26:48.543
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:52.555
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:26:52.556
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:26:52.557
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:52.574
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":"GSKAP","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:26:52.575
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:26:52.575
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:55.194
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:26:55.195
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:26:55.195
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:58.884
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:26:58.886
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:26:58.886
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:26:59.268
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:26:59.268
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:26:59.268
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:27:03.749
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:27:03.750
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:27:03.751
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:27:04.150
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:27:04.151
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:27:04.152
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:27:05.021
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:27:05.022
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:27:05.022
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:27:05.042
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:27:05.043
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:27:05.043
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:27:05.861
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:27:05.862
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:27:05.862
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:27:27.416
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:27:27.417
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:27:27.417
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:27:27.752
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":"5","location":"Chennai","quantity":500},{"serialId":"6","location":"Bangalore","quantity":500},{"serialId":"7","location":"Pune","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:27:27.753
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:27:27.754
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:01.852
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:01.852
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:01.853
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:02.215
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\","quantity":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:02.217
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:02.217
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:03.944
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:03.944
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:03.945
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:04.323
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{"serialId":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-06-29 11:28:04.325
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-06-29 11:28:04.325
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:07.717
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":"8","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:07.717
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:07.718
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:08.974
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2022-06-29 11:28:08.975
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2022-06-29 11:28:08.975
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2022-06-29 11:28:08.993
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.cognizant.drug.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.cognizant.drug.dao.DrugDetailsRepository;
import com.cognizant.drug.dao.DrugLocationRepository;
import com.cognizant.drug.entity.DrugDetails;
import com.cognizant.drug.entity.DrugLocationDetails;
import com.cognizant.drug.entity.ResponseForSuccess;
import com.cognizant.drug.entity.Stock;
import com.cognizant.drug.entity.ValidateToken;
import com.cognizant.drug.restclients.AuthFeign;
import com.cognizant.drug.service.DrugDetailsService;
import com.fasterxml.jackson.databind.ObjectMapper;


@AutoConfigureMockMvc
@SpringBootTest
public class DrugControllerTest {

	@InjectMocks
	DrugController drugController;

	@Mock
	DrugDetailsService drugDetailsService;

	@Autowired
	DrugDetailsRepository drugDetailsRepository;

	@Autowired
	DrugLocationRepository drugLocationRepository;

	@MockBean
	AuthFeign authFeign;

	@Autowired
	MockMvc mockMvc;

	List<DrugLocationDetails> list = new ArrayList<DrugLocationDetails>();

	@Test
	void testGetDrugById() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Drug1", "Farmson", new Date(), new Date(), list);
		//System.out.println("aaaaaaaaaaa"+expected);
		ObjectMapper objectMapper = new ObjectMapper(); //functionality for reading and writing JSON
		String expectedValue = objectMapper.writeValueAsString(expected).substring(11, 13);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDrugById( "PR1", "Bearer Token")).thenReturn(expected);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsById/PR1").header("Authorization", "Bearer Token")).andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(11,13);
		
		
		assertEquals(expectedValue,actualValue);
	}

	@Test
	void testGetDrugByName() throws Exception {
		list.add(new DrugLocationDetails("PR1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("PR1", "Paracetamol", "Farmson", new Date(), new Date(), list);
		ObjectMapper objectMapper = new ObjectMapper();
		String expectedValue = objectMapper.writeValueAsString(expected).substring(27, 37);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		MvcResult result = mockMvc.perform(get("/api/searchDrugsByName/Paracetamol").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString().substring(27, 37);
		assertEquals(expectedValue, actualValue);
	}

	@Test
	void testDispatchableDrugStock() throws Exception {
		Stock expectedStock = new Stock("PR1","Paracetamol",new Date(),500);
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getDispatchableDrugStock("PR1", "Chennai", "Bearer token")).thenReturn(expectedStock);
		when(drugController.getDispatchableDrugStock("Bearer token", "D1", "Chennai")).thenReturn(expectedStock);

		MvcResult result = mockMvc.perform(post("/api/getDispatchableDrugStock/PR1/Hyderabad").header("Authorization", "Bearer Token"))
				.andReturn();
		String actualValue = result.getResponse().getContentAsString();

		String expectedValue = "{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\","
				+ "\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"stocks\":500}";


		assertEquals(expectedValue, actualValue);


	}

	@Test
	void testupdateQuantity() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ResponseForSuccess> expectedValue = new ResponseEntity<ResponseForSuccess>(
				new ResponseForSuccess("Refill done successfully"), HttpStatus.OK);
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.updateQuantity("D1", "Chennai", 1, "Bearer token")).thenReturn(expectedValue);
		when(drugController.updateQuantity("D1", "Chennai", "Bearer token", 1)).thenReturn(expectedValue);

		MvcResult result = mockMvc
				.perform(get("/updateDispatchableDrugStock/D1/Hyderabad/1").header("Authorization", "Bearer Token"))
				.andReturn();

		HttpStatus actualValue = response.getStatusCode();

		HttpStatus exp = expectedValue.getStatusCode();

		assertEquals(exp, actualValue);
	}

	@Test
	void testgetAllDrugs() throws Exception {
		ValidateToken tokenValid = new ValidateToken("uid", "uname", true);
		ObjectMapper objectMapper = new ObjectMapper();
		ResponseEntity<ValidateToken> response = new ResponseEntity<ValidateToken>(tokenValid, HttpStatus.OK);
		List<DrugDetails> expectedValue = new ArrayList<>();
		list.add(new DrugLocationDetails("D1", "Chennai", 30, null));
		DrugDetails expected = new DrugDetails("D1", "Drug1", "grace", new Date(), new Date(), list);
		expectedValue.add(expected);
		when(authFeign.getValidity("Bearer Token")).thenReturn(response);
		when(drugDetailsService.getAllDrugs("token")).thenReturn(expectedValue);
		when(drugController.getAllDrugs("token")).thenReturn(expectedValue);

		MvcResult result = mockMvc.perform(get("/api/getAllDrugs").header("Authorization", "Bearer Token")).andReturn();

		String actualValue = result.getResponse().getContentAsString();

		String expectedResult = "[{\"drugId\":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"PD3\",\"drugName\":\"Penadol\",\"manufacturer\":\"GSK\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"9\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"10\",\"location\":\"Bangalore\",\"quantity\":500}]},"
				+ "{\"drugId\":\"DD4\",\"drugName\":\"Dolo\",\"manufacturer\":\"MicroLabs\",\"manufactureDate\":\"2021-10-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"11\",\"location\":\"Hyderabad\",\"quantity\":500},{\"serialId\":\"12\",\"location\":\"Bangalore\",\"quantity\":500}]}]";

		"[{\"drugId":\"PR1\",\"drugName\":\"Paracetamol\",\"manufacturer\":\"Farmson\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"1\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"2\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"3\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"4\",\"location\":\"Hyderabad\",\"quantity\":500}]},"
				+ "{\"drugId\":\"CR2\",\"drugName\":\"Crocin\",\"manufacturer\":\"GSKAP\",\"manufactureDate\":\"2020-11-21T18:30:00.000+00:00\",\"expiryDate\":\"2024-11-21T18:30:00.000+00:00\",\"druglocationQuantities\":[{\"serialId\":\"5\",\"location\":\"Chennai\",\"quantity\":500},{\"serialId\":\"6\",\"location\":\"Bangalore\",\"quantity\":500},{\"serialId\":\"7\",\"location\":\"Pune\",\"quantity\":500},{\"serialId\":\"8\","location":"Hyderabad","quantity":500}]},{"drugId":"PD3","drugName":"Panadol","manufacturer":"GSK","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"9","location":"Chennai","quantity":500},{"serialId":"10","location":"Bangalore","quantity":500}]},{"drugId":"DD4","drugName":"Dolo","manufacturer":"MicroLabs","manufactureDate":"2020-11-21T18:30:00.000+00:00","expiryDate":"2024-11-21T18:30:00.000+00:00","druglocationQuantities":[{"serialId":"11","location":"Hyderabad","quantity":500},{"serialId":"12","location":"Bangalore","quantity":500}]}]"
		assertEquals(expectedResult, actualValue);
	}

}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2047)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3853)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3095)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3390)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1271)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
